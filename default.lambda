let true = \x y. x
let false = \x y. y
let && = \p q. p q p
let || = \p q. p p q
let ! = \p a b. p b a
let ifthenelse = \p a b. p a b
let 0 = \f x. x
let succ = \n f x. f (n f x)
let 1 = succ 0
let 2 = succ (succ 0)
let 3 = succ (succ (succ 0))
let 4 = succ (succ (succ (succ 0)))
let plus = \m n f x. m f (n f x)
let mult = \m n. m (plus n) 0
let pow = \m n. n m
let pred = \n f x. n(\g h. h(g f))(\u. x)(\u. u)
let sub = \m n. n pred m
let iszero = \n. n (\a. false) true
let leq = \m n. iszero (sub m n)
let factorial_helper = \f n. ifthenelse (iszero n) 1 (mult n (f f (pred n)))
let factorial = \n. factorial_helper factorial_helper n
